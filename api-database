package main

import (
	"github.com/gin-gonic/gin"
	"net/http"
)

type Good struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Year    int    `json:"year of production"`
	Type    string `json:"type"`
	Company string `json:"Company"`
}

var goods = []Good{
	{ID: "1", Name: "iPhone 16 Pro", Year: 2024, Type: "electronic device", Company: "Apple"},
	{ID: "2", Name: "Vacume cleaner Dyson V8", Year: 2022, Type: "appliances", Company: "Dyson"},
	{ID: "3", Name: "macbook air 2021", Year: 2021, Type: "electronic device", Company: "Apple"},
	{ID: "4", Name: "logitech g102", Year: 2021, Type: "PC accessories", Company: "logitech"},
	{ID: "5", Name: "HUAWEI MatePad Pro", Year: 2025, Type: "electronic device", Company: "HUAWEI"},
	{ID: "6", Name: "Router ADSL2+", Year: 2024, Type: "network  equipment", Company: "Mercusys"},
}

func main() {
	router := gin.Default()
	router.GET("/goods", getGood)
	router.GET("/goods/:id", getGoodByID)
	router.POST("/goods", addGood)
	router.PUT("/goods/:id", updateGood)
	router.DELETE("/goods/:id", deleteGood)
	router.Run(":8080")
}
func getGood(c *gin.Context) {
	c.JSON(http.StatusOK, goods)
}

func getGoodByID(c *gin.Context) {
	id := c.Param("id")
	for _, good := range goods {
		if good.ID == id {
			c.JSON(http.StatusOK, good)
			return
		}
	}
	c.JSON(http.StatusNotFound, gin.H{"message": "Good not found"})
}

func addGood(c *gin.Context) {
	var newGood Good
	if err := c.ShouldBindJSON(&newGood); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	goods = append(goods, newGood)
	c.JSON(http.StatusCreated, newGood)
}

func updateGood(c *gin.Context) {
	id := c.Param("id")
	var updatedGood Good
	if err := c.ShouldBindJSON(&updatedGood); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	for i, good := range goods {
		if good.ID == id {
			goods[i] = updatedGood
			c.JSON(http.StatusOK, updatedGood)
			return
		}
	}
	c.JSON(http.StatusNotFound, gin.H{"message": "Good not found"})
}

func deleteGood(c *gin.Context) {
	id := c.Param("id")
	for i, good := range goods {
		if good.ID == id {
			goods = append(goods[:i], goods[i+1:]...)
			c.JSON(http.StatusOK, gin.H{"message": "Good deleted"})
			return
		}
	}
	c.JSON(http.StatusNotFound, gin.H{"message": "Good not found"})
}
